install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
#intervalo de confiança para variável profits da base de dados ceo
t.test(grad, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
#intervalo de confiança para variável profits da base de dados ceo
t.test("profits", y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
X <- (ceo$profits)
#intervalo de confiança para variável profits da base de dados ceo
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
profits <- (ceo$profits)
#intervalo de confiança para variável profits da base de dados ceo
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
x_profits <- (ceo$profits)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
h_husearns <- (salarios$husearns)
t.test(h_husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
x_profits <- (ceo$profits)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
var_salary <- var(ceo$salary)
var_salary
n <- sum (ceo$n)
n
n_ceo <- sum (ceo$n)
n_ceo
chiinf <- qchisq(0.025, df=176)
salary_chiinf <- qchisq(0.025, df=176)
salary_chisup <- qchisq(0.975, df=176)
salary_superior <- ((n-1)*var_salary)/chiinf
salary_inferior <- ((n-1)*var_salary)/chisup
var_salary <- var(ceo$salary)
var_salary
n_ceo <- sum (ceo$n)
n_ceo
salary_chiinf <- qchisq(0.025, df=176)
salary_chisup <- qchisq(0.975, df=176)
salary_superior <- ((n-1)*var_salary)/salary_chiinf
salary_inferior <- ((n-1)*var_salary)/salary_chisup
inferior
superior
salary_inferior
salary_superior
sd_salary <- sd(ceo$salary)
sd_sales <- sd(ceo$sales)
x_salary <- ceo$salary
y_salary <- ceo$sales
z.test(x_salary, y_salary, alternative = "two.sided", mu = 0, sigma.x = sd_salary,
sigma.y = sd_sales, conf.level = 0.95)
library(BSDA)
z.test(x_salary, y_salary, alternative = "two.sided", mu = 0, sigma.x = sd_salary,
sigma.y = sd_sales, conf.level = 0.95)
library(stats)
xt_salary <- ceo$salary
yt_sales <- ceo$sales
t.test(xt_salary, yt_sales,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
xf_sales <- ceo$sales
yf_mktval <- ceo$mktval
var.test(xf_sales, yf_mktva, alternative = "two.sided", conf.level = 0.95)
var.test(xf_sales, yf_mktval, alternative = "two.sided", conf.level = 0.95)
library(stats)
xt_profits <- ceo$profits
yt_sales <- ceo$sales
t.test(xt_profits, yt_sales,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
yt_profits <- ceo$profits
xt_sales <- ceo$sales
t.test(xt_sales, yt_profits,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
y_salary <- ceo$salary
x_salary <- ceo$sales
z.test(x_salary, y_salary, alternative = "two.sided", mu = 0, sigma.x = sd_salary,
sigma.y = sd_sales, conf.level = 0.95)
library(BSDA)
z.test(x_salary, y_salary, alternative = "two.sided", mu = 0, sigma.x = sd_salary,
sigma.y = sd_sales, conf.level = 0.95)
print(vol)
help(print)
# Volume de um tubo dado por pi * raio^2 * altura
# Calcular volume de um tubo de raio 10 e altura 70
r = 10
h = 70
vol <- pi * r^2 * h
print(vol)
past("Volume:",vol)
r = 10
h = 70
vol <- pi * r^2 * h
past("Volume:",vol)
# Volume de um tubo dado por pi * raio^2 * altura
# Calcular volume de um tubo de raio 10 e altura 70
r = 10
h = 70
vol <- pi * r^2 * h
past("Volume:",vol)
# Volume de um tubo dado por pi * raio^2 * altura
# Calcular volume de um tubo de raio 10 e altura 70
r = 10
h = 70
vol <- pi * r^2 * h
paste("Volume:",vol)
r = 10
h = 70
vol <- pi * r^2 * h
paste("Volume:",round(vol, digits=2))
print(e)
e
euler
lnb <- -2.6464 + 1.9960*log(d,base=exp(1)) + 0.7558*log(h,base=exp(1))
h = 12
d = 15
b <- e^(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
h = 12
d = 15
b <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
print(lnb)
h = 12
d = 15
b <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
print(b)
print(lnb)
h = 12
d = 15
b <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
new_b <- exp(1)^lnb
print(b)
print(new_b)
h = 12
d = 15
b <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
new_b <- exp(lnb)
print(b)
print(new_b)
# biomassa1 e a estimativa do segundo modelo no objeto biomassa2.
h = 12
d = 15
biomass_1 <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
biomass_2 <- exp(lnb)
paste("Com exp(-1.7953) * d^2.2974: ",biomass_1)
paste("Com -2.6464 + 1.9960 ln(d) + 0.7558 ln(h):", biomass_2)
h = 12
d = 15
biomass_1 <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
biomass_2 <- exp(lnb)
paste("Com exp(-1.7953) * d^2.2974: ",round(biomass_1,2))
paste("Com -2.6464 + 1.9960 ln(d) + 0.7558 ln(h):", round(biomass_2,2))
vet <- c(9839,10149,10486,10746,11264,11684,12082,12599,13004,13350,13717,14052)
print(vet)
vet <- c(9839,10149,10486,10746,11264,11684,12082,12599,13004,13350,13717,14052)
print(vet)
m <- mean(vet)
m
max_test <- max(vet)
max_test
min_test <- min(vet)
min_test
length(vet)
order(vet, decreasing=F)
order(vet, decreasing=T)
sort(vet, decreasing=T)
R.version
print("olá mundo")
ls
RF_final <- randomForest(VOL~., data=dataset, type="regression", importance=T)
RF_final_predict <- predict(RF_final, dataset)
saveRDS(RF_final, "RF_final_model.rds")
rf_r2_result <- r2(dataset$VOL, RF_final_predict)
rf_r2_result
rf_Syx_result <- Syx(dataset$VOL, RF_final_predict, length(RF_final_predict))
rf_Syx_result
library("caret")
library("mlbench")
library("randomForest")
start_time <- Sys.time()
dataset <- read.csv2("http://www.razer.net.br/datasets/Volumes.csv")
dataset$NR <- NULL
index <- createDataPartition(dataset$VOL, p=0.80, list=FALSE)
train_ <- dataset[index,]
test <- dataset[-index,]
r2 <- function(obs, pred){
return(1-(sum((obs - pred) ^ 2) / sum((obs - mean(obs))^2)))
}
Syx <- function(obs, pred, n){
return(sqrt(sum((obs - pred) ^ 2) / (n - 2)))
}
#SVM model
set.seed(7)
svm <- train(VOL~., data=train_, method="svmRadial", linout=T)
predict.svm <- predict(svm, test)
#predict.svm
svm_r2_result <- r2(test$VOL, predict.svm)
svm_r2_result
svm_Syx_result <- Syx(test$VOL, predict.svm, length(predict.svm))
svm_Syx_result
#RNA
set.seed(7)
rna <- train(VOL~., data=train_, method="neuralnet")
predict.rna <- predict(rna, test)
#predict.rna
rna_r2_result <- r2(test$VOL, predict.rna)
#rna_r2_result
rna_Syx_result <- Syx(test$VOL, predict.rna, length(predict.rna))
#rna_Syx_result
#Random Forest
set.seed(7)
rf <- train(VOL~., data=train_, method="rf", linout=T)
predict.rf <- predict(rf, test)
rf_r2_result <- r2(test$VOL, predict.rf)
rf_r2_result
rf_Syx_result <- Syx(test$VOL, predict.rf, length(predict.rf))
rf_Syx_result
#Alometric
set.seed(7)
alom <- nls(VOL ~ b0 + b1*DAP*DAP*HT, train_, start=list(b0=0.5, b1=0.5))
predict.alom <- predict(alom, test)
#predict.alom
alom_r2_result <- r2(test$VOL, predict.alom)
#alom_r2_result
alom_Syx_result <- Syx(test$VOL, predict.alom, length(predict.alom))
#alom_Syx_result
##########print de tudo##################
paste("RF-R2: ", rf_r2_result)
paste("RF-Syx: ", rf_Syx_result)
paste("SVM-R2: ", svm_r2_result)
paste("SVM-Syx: ", svm_Syx_result)
paste("RNA-R2: ", rna_r2_result)
paste("RNA-Syx: ", rna_Syx_result)
paste("ALOM-R2: ", alom_r2_result)
paste("ALOM-R2: ", alom_Syx_result)
end_time <- Sys.time()
final_time <- end_time - start_time
paste("Tempo de execução: ", final_time)
# Prints
paste("Method | R² | Syx")
paste("RF   |", rf_r2_result, "|", rf_Syx_result)
paste("SVM  |", svm_r2_result, "|", svm_Syx_result)
paste("NNET |", rna_r2_result, "|", rna_Syx_result)
paste("ALOM |", alom_r2_result, "|", alom_Syx_result)
cat("RF   |", rf_r2_result, "|", rf_Syx_result)
cat("RF   |", rf_r2_result, "|", rf_Syx_result \n)
cat("RF   |", rf_r2_result, "|", rf_Syx_result %\n%)
cat("RF   |", rf_r2_result, "|", rf_Syx_result '\n')
cat("RF   |", rf_r2_result, "|", rf_Syx_result, sep='\n')
paste("RF   |", rf_r2_result, "|", rf_Syx_result, sep='\n')
paste("RF   |", rf_r2_result, "|", rf_Syx_result)
paste("RF   |", rf_r2_result, "|", rf_Syx_result)
paste("RF   |", rf_r2_result, "|", rf_Syx_result, "SVM  |", svm_r2_result, "|", svm_Syx_result)
cat(sprintf("RF   |", rf_r2_result, "|", rf_Syx_result, "\nSVM  |", svm_r2_result, "|", svm_Syx_result))
cat(paste("RF   |", rf_r2_result, "|", rf_Syx_result, "SVM  |", svm_r2_result, "|", svm_Syx_result, sep=""))
cat(paste("RF   |", rf_r2_result, "|", rf_Syx_result, "\nSVM  |", svm_r2_result, "|", svm_Syx_result, sep=""))
cat(paste("Method | R² | Syx",
"\nRF   |", rf_r2_result, "|", rf_Syx_result,
"\nSVM  |", svm_r2_result, "|", svm_Syx_result,
"\nNNET |", rna_r2_result, "|", rna_Syx_result,
"\nALOM |", alom_r2_result, "|", alom_Syx_result,
sep=""))
cat(paste("Method | R² | Syx",
"\nRF   |", round(rf_r2_result, 4), "|", rf_Syx_result,
"\nSVM  |", svm_r2_result, "|", svm_Syx_result,
"\nNNET |", rna_r2_result, "|", rna_Syx_result,
"\nALOM |", alom_r2_result, "|", alom_Syx_result,
sep=""))
cat(paste("Method | R² | Syx",
"\nRF   |", round(rf_r2_result, 4), "|", round(rf_Syx_result, 4),
"\nSVM  |", round(svm_r2_result, 4), "|", round(svm_Syx_result, 4),
"\nNNET |", round(rna_r2_result, 4), "|", round(rna_Syx_result, 4),
"\nALOM |", round(alom_r2_result, 4), "|", round(alom_Syx_result, 4),
sep=""))
# Prints
cat(paste("Method | R² | Syx",
"\nRF   |", round(rf_r2_result, 4), "|", round(rf_Syx_result, 4),
"\nSVM  |", round(svm_r2_result, 4), "|", round(svm_Syx_result, 4),
"\nNNET |", round(rna_r2_result, 4), "|", round(rna_Syx_result, 4),
"\nALOM |", round(alom_r2_result, 4), "|", round(alom_Syx_result, 4),
sep=""))
# Prints
cat(paste("Method | R² | Syx",
"\nRF   |", round(rf_r2_result, 5), "|", round(rf_Syx_result, 5),
"\nSVM  |", round(svm_r2_result, 5), "|", round(svm_Syx_result, 5),
"\nNNET |", round(rna_r2_result, 5), "|", round(rna_Syx_result, 5),
"\nALOM |", round(alom_r2_result, 5), "|", round(alom_Syx_result, 5),
sep=""))
# Prints
cat(paste("Method | R² | Syx",
"\nRF       |", round(rf_r2_result, 5), "|", round(rf_Syx_result, 5),
"\nSVM      |", round(svm_r2_result, 5), "|", round(svm_Syx_result, 5),
"\nNNET     |", round(rna_r2_result, 5), "|", round(rna_Syx_result, 5),
"\nALOM     |", round(alom_r2_result, 5), "|", round(alom_Syx_result, 5),
sep=""))
# Prints
cat(paste("Method   | R²     | Syx",
"\nRF     |", round(rf_r2_result, 5), "|", round(rf_Syx_result, 5),
"\nSVM    |", round(svm_r2_result, 5), "|", round(svm_Syx_result, 5),
"\nNNET   |", round(rna_r2_result, 5), "|", round(rna_Syx_result, 5),
"\nALOM   |", round(alom_r2_result, 5), "|", round(alom_Syx_result, 5),
sep=""))
# Prints
cat(paste("Method | R²     | Syx",
"\nRF     |", round(rf_r2_result, 5), "|", round(rf_Syx_result, 5),
"\nSVM    |", round(svm_r2_result, 5), "|", round(svm_Syx_result, 5),
"\nNNET   |", round(rna_r2_result, 5), "|", round(rna_Syx_result, 5),
"\nALOM   |", round(alom_r2_result, 5), "|", round(alom_Syx_result, 5),
sep=""))
# Prints
cat(paste("Method | R²    | Syx",
"\nRF     |", round(rf_r2_result, 5), "|", round(rf_Syx_result, 5),
"\nSVM    |", round(svm_r2_result, 5), "|", round(svm_Syx_result, 5),
"\nNNET   |", round(rna_r2_result, 5), "|", round(rna_Syx_result, 5),
"\nALOM   |", round(alom_r2_result, 5), "|", round(alom_Syx_result, 5),
sep=""))
# Prints
cat(paste("Method |   R²|  Syx",
"\nRF     |", round(rf_r2_result, 5), "|", round(rf_Syx_result, 5),
"\nSVM    |", round(svm_r2_result, 5), "|", round(svm_Syx_result, 5),
"\nNNET   |", round(rna_r2_result, 5), "|", round(rna_Syx_result, 5),
"\nALOM   |", round(alom_r2_result, 5), "|", round(alom_Syx_result, 5),
sep=""))
# Prints
cat(paste("Method |   R²  |  Syx",
"\nRF     |", round(rf_r2_result, 5), "|", round(rf_Syx_result, 5),
"\nSVM    |", round(svm_r2_result, 5), "|", round(svm_Syx_result, 5),
"\nNNET   |", round(rna_r2_result, 5), "|", round(rna_Syx_result, 5),
"\nALOM   |", round(alom_r2_result, 5), "|", round(alom_Syx_result, 5),
sep=""))
getwd()
setwd("C:/Users/Smart/Documents/IAA/IAUFPR/r_language_learn/final_project")
# Train the best model according
best_model <- randomForest(VOL~.,
data=dataset,
type="regression",
importance=TRUE)
final_predict.rf <- predict(best_model, dataset)
# Get the R and Syx
rf_r2_result <- r2(dataset$VOL, predict.rf)
rf_Syx_result <- Syx(dataset$VOL, predict.rf, length(final_predict.rf))
rf_r2_result
rf_Syx_result
final_predict.rf <- predict(best_model, dataset$VOL)
# Train the best model according
best_model <- randomForest(VOL~.,
data=dataset,
type="regression",
importance=TRUE)
final_predict.rf <- predict(best_model, dataset)
# Get the R and Syx
rf_r2_result <- r2(dataset$VOL, predict.rf)
rf_Syx_result <- Syx(dataset$VOL, predict.rf, length(final_predict.rf))
rf_r2_result
rf_Syx_result
# Train the best model according
best_model <- randomForest(VOL~.,
data=dataset,
type="regression")
final_predict.rf <- predict(best_model, dataset)
# Get the R and Syx
rf_r2_result <- r2(dataset$VOL, predict.rf)
rf_Syx_result <- Syx(dataset$VOL, predict.rf, length(final_predict.rf))
rf_r2_result
rf_Syx_result
# Prints
cat(paste("Method |   R²  |  Syx",
"\nRF     |", round(rf_r2_result, 5), "|", round(rf_Syx_result, 5),
"\nSVM    |", round(svm_r2_result, 5), "|", round(svm_Syx_result, 5),
"\nNNET   |", round(rna_r2_result, 5), "|", round(rna_Syx_result, 5),
"\nALOM   |", round(alom_r2_result, 5), "|", round(alom_Syx_result, 5),
sep=""))
#Random Forest
set.seed(7)
rf <- train(VOL~., data=train_, method="rf", linout=T)
predict.rf <- predict(rf, test)
rf_r2_result <- r2(test$VOL, predict.rf)
rf_r2_result
rf_Syx_result <- Syx(test$VOL, predict.rf, length(predict.rf))
rf_Syx_result
# Train the best model according
best_model <- randomForest(VOL~.,
data=dataset,
type="regression",
importance=TRUE)
final_predict.rf <- predict(best_model, dataset)
# Get the R and Syx
rf_r2_final <- r2(dataset$VOL, predict.rf)
rf_Syx_final <- Syx(dataset$VOL, predict.rf, length(final_predict.rf))
rf_r2_final
rf_Syx_final
final_predict.rf <- predict(best_model, dataset)
# Get the R and Syx
rf_r2_final <- r2(dataset$VOL, final_predict.rf)
rf_Syx_final <- Syx(dataset$VOL, final_predict.rf, length(final_predict.rf))
rf_r2_final
rf_Syx_final
# Save model
saveRDS(best_model, "tree_volumes_random_forest.rds")
# Prints
cat(paste("Method |   R²  |  Syx\n",
rf_r2_final, rf_Syx_final))
# Prints
cat(paste("Method Random Forest |   R²  |  Syx\n",
rf_r2_final, rf_Syx_final))
# Prints
cat(paste("Method Random Forest \n|   R²  |  Syx\n",
rf_r2_final, rf_Syx_final))
"|"round(rf_r2_final, 5), "|", round(rf_Syx_final, 5), "|" )
"|", round(rf_r2_final, 5), "|", round(rf_Syx_final, 5), "|" )
# Prints
cat(paste("Method Random Forest \n|   R²  |  Syx\n",
"|", round(rf_r2_final, 5), "|", round(rf_Syx_final, 5), "|" ))
# Prints
cat(paste("Method Random Forest \n |   R²  |  Syx\n",
"|", round(rf_r2_final, 4), "|", round(rf_Syx_final, 4), "|" ))
# Prints
cat(paste("Method Random Forest \n |   R²   |  Syx    |\n",
"|", round(rf_r2_final, 4), "|", round(rf_Syx_final, 4), "|" ))
# Prints
cat(paste("Method Random Forest \n |   R²   |  Syx  |\n",
"|", round(rf_r2_final, 4), "|", round(rf_Syx_final, 4), "|" ))
# Prints
cat(paste("Method Random Forest \n |   R²   |  Syx   |\n",
"|", round(rf_r2_final, 4), "|", round(rf_Syx_final, 4), "|" ))
# Prints
cat(paste("     Random Forest \n |   R²   |  Syx   |\n",
"|", round(rf_r2_final, 4), "|", round(rf_Syx_final, 4), "|" ))
typeof(rf_r2_final)
#Load dataset from csv
dataset <- read.csv2("http://www.razer.net.br/datasets/Volumes.csv")
dataset$NR <- NULL
#Create data partition
#<20% test>
#<80% train>
index <- createDataPartition(dataset$VOL, p=0.80, list=FALSE)
train_ <- dataset[index,]
library("caret")
library("mlbench")
library("randomForest")
#Create data partition
#<20% test>
#<80% train>
index <- createDataPartition(dataset$VOL, p=0.80, list=FALSE)
train_ <- dataset[index,]
test <- dataset[-index,]
#R-Squared function
#Return <dinamic int/double>
r2 <- function(obs, pred){
return(1-(sum((obs - pred) ^ 2) / sum((obs - mean(obs))^2)))
}
#Standard Error function
#Return <dinamic int/double>
Syx <- function(obs, pred, n){
return(sqrt(sum((obs - pred) ^ 2) / (n - 2)))
}
#SVM method
set.seed(7)
svm <- train(VOL~., data=train_, method="svmRadial", linout=T)
predict.svm <- predict(svm, test)
svm_r2_result <- r2(test$VOL, predict.svm)
svm_Syx_result <- Syx(test$VOL, predict.svm, length(predict.svm))
#RNA Method
set.seed(7)
svm_Syx_result
length(predict.svm)
svm_r2_result
