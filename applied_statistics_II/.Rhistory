earns = salarios$earns
IQR(earns)
quantile(earns, c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
library (fdth)
table <- fdt (salarios$husearns)
print (table)
tableEarns <- fdt (salarios$earns)
print (tableEarns)
cvEarns <- (sdEarns/earns)
cvEarns
cvEarns <- (sdEarns/earns)
cvEarns
sdEarns <- sd (salarios$earns)
sdEarns
cvEarns <- (sdEarns/earns)
cvEarns
cv
cv <- (sd/mean)
#mostrar media
mean
load("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/salarios.RData")
#media da idade dos maridos
mean <- mean (salarios$husearns)
earns <- mean (salarios$earns)
earns
#media da idade das mulheres
meanw <- mean (salarios$age)
#mostrar media
mean
meanw
median <- median (salarios$husage)
medianw <- median (salarios$age)
earns <- median (salarios$earns)
earns
median
medianw
table(salarios$husage)
subset(table(salarios$husage), table(salarios$husage) == max(table(salarios$husage)))
table(salarios$earns)
subset(table(salarios$earns), table(salarios$earns) == max(table(salarios$earns)))
var <- var (salarios$age)
varEarns <- var (salarios$earns)
varEarns
var
sd <- sd (salarios$husearns)
sdEarns <- sd (salarios$earns)
sd
sdEarns
cv <- (sd/mean)
cvEarns <- (sdEarns/earns)
cvEarns
cv
cvEarns
library(carData)
library(datasets)
install.packages("BSDA")
library(BSDA)
sd <- sd(ceo$sales)
x <- ceos$sales
ceo <- read.table("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.txt",
header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
####################################################################################
##Segunda Lista de Exercicios
####################################################################################
## Importar os Dados
ceo <- read.table("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.txt", header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
save ("ceo", file = "C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.RData")
load("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.RData")
sd <- sd(ceo$sales)
x <- ceos$sales
x <- ceo$sales
z.test(x, y = NULL, alternative = "two.sided", mu = 0, sigma.x = sd,
sigma.y = NULL, conf.level = 0.95)
sd_profits <- sd(profits$sales)
x_profits <- ceo$profits
#intervalo de confiça para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
library(stats)
#intervalo de confiça para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
library(stats)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
install.packages("stats")
install.packages("stats")
install.packages("stats")
load("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.RData")
load("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.RData")
library(stats)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
var_salary <- var(ceo$salary)
n_salary <- sum (salary$n_salary)
n_salary <- sum (salary$n)
load("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.RData")
n_salary <- sum (salary$n_salary)
library(carData)
library(datasets)
library(BSDA)
library(stats)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
var <- var(salarios$husearns)
n <- sum (salarios$n)
var_salary <- var(ceo$salary)
n_salary <- sum (salary$n_salary)
ceo$n <- with(ceo, 1)
library(stats)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
var_salary <- var(ceo$salary)
n <- sum (salary$n)
n <- sum (ceo$n)
var_salary
n
library(stats)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
####################################################################################
##Segunda Lista de Exercicios
####################################################################################
## Importar os Dados
ceo <- read.table("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.txt", header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
save ("ceo", file = "C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.RData")
load("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/ceo.RData")
load("C:/Users/Smart/Documents/IAA/ESTATISTICA IAA/salarios.RData")
View (ceo)
ceo$n <- with(ceo, 1)
library(stats)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
#intervalo de confiança para variável profits da base de dados ceo
t.test(grad, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
t.test(husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
#intervalo de confiança para variável profits da base de dados ceo
t.test("profits", y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
X <- (ceo$profits)
#intervalo de confiança para variável profits da base de dados ceo
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
profits <- (ceo$profits)
#intervalo de confiança para variável profits da base de dados ceo
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
x_profits <- (ceo$profits)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
h_husearns <- (salarios$husearns)
t.test(h_husearns, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
x_profits <- (ceo$profits)
#intervalo de confiança para variável profits da base de dados ceo
t.test(profits, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=ceo)
var_salary <- var(ceo$salary)
var_salary
n <- sum (ceo$n)
n
n_ceo <- sum (ceo$n)
n_ceo
chiinf <- qchisq(0.025, df=176)
salary_chiinf <- qchisq(0.025, df=176)
salary_chisup <- qchisq(0.975, df=176)
salary_superior <- ((n-1)*var_salary)/chiinf
salary_inferior <- ((n-1)*var_salary)/chisup
var_salary <- var(ceo$salary)
var_salary
n_ceo <- sum (ceo$n)
n_ceo
salary_chiinf <- qchisq(0.025, df=176)
salary_chisup <- qchisq(0.975, df=176)
salary_superior <- ((n-1)*var_salary)/salary_chiinf
salary_inferior <- ((n-1)*var_salary)/salary_chisup
inferior
superior
salary_inferior
salary_superior
sd_salary <- sd(ceo$salary)
sd_sales <- sd(ceo$sales)
x_salary <- ceo$salary
y_salary <- ceo$sales
z.test(x_salary, y_salary, alternative = "two.sided", mu = 0, sigma.x = sd_salary,
sigma.y = sd_sales, conf.level = 0.95)
library(BSDA)
z.test(x_salary, y_salary, alternative = "two.sided", mu = 0, sigma.x = sd_salary,
sigma.y = sd_sales, conf.level = 0.95)
library(stats)
xt_salary <- ceo$salary
yt_sales <- ceo$sales
t.test(xt_salary, yt_sales,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
xf_sales <- ceo$sales
yf_mktval <- ceo$mktval
var.test(xf_sales, yf_mktva, alternative = "two.sided", conf.level = 0.95)
var.test(xf_sales, yf_mktval, alternative = "two.sided", conf.level = 0.95)
library(stats)
xt_profits <- ceo$profits
yt_sales <- ceo$sales
t.test(xt_profits, yt_sales,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
yt_profits <- ceo$profits
xt_sales <- ceo$sales
t.test(xt_sales, yt_profits,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
y_salary <- ceo$salary
x_salary <- ceo$sales
z.test(x_salary, y_salary, alternative = "two.sided", mu = 0, sigma.x = sd_salary,
sigma.y = sd_sales, conf.level = 0.95)
library(BSDA)
z.test(x_salary, y_salary, alternative = "two.sided", mu = 0, sigma.x = sd_salary,
sigma.y = sd_sales, conf.level = 0.95)
print(vol)
help(print)
# Volume de um tubo dado por pi * raio^2 * altura
# Calcular volume de um tubo de raio 10 e altura 70
r = 10
h = 70
vol <- pi * r^2 * h
print(vol)
past("Volume:",vol)
r = 10
h = 70
vol <- pi * r^2 * h
past("Volume:",vol)
# Volume de um tubo dado por pi * raio^2 * altura
# Calcular volume de um tubo de raio 10 e altura 70
r = 10
h = 70
vol <- pi * r^2 * h
past("Volume:",vol)
# Volume de um tubo dado por pi * raio^2 * altura
# Calcular volume de um tubo de raio 10 e altura 70
r = 10
h = 70
vol <- pi * r^2 * h
paste("Volume:",vol)
r = 10
h = 70
vol <- pi * r^2 * h
paste("Volume:",round(vol, digits=2))
print(e)
e
euler
lnb <- -2.6464 + 1.9960*log(d,base=exp(1)) + 0.7558*log(h,base=exp(1))
h = 12
d = 15
b <- e^(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
h = 12
d = 15
b <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
print(lnb)
h = 12
d = 15
b <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
print(b)
print(lnb)
h = 12
d = 15
b <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
new_b <- exp(1)^lnb
print(b)
print(new_b)
h = 12
d = 15
b <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
new_b <- exp(lnb)
print(b)
print(new_b)
# biomassa1 e a estimativa do segundo modelo no objeto biomassa2.
h = 12
d = 15
biomass_1 <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
biomass_2 <- exp(lnb)
paste("Com exp(-1.7953) * d^2.2974: ",biomass_1)
paste("Com -2.6464 + 1.9960 ln(d) + 0.7558 ln(h):", biomass_2)
h = 12
d = 15
biomass_1 <- exp(-1.7953) * d^2.2974
lnb <- -2.6464 + 1.9960*log(d,exp(1)) + 0.7558*log(h,exp(1))
biomass_2 <- exp(lnb)
paste("Com exp(-1.7953) * d^2.2974: ",round(biomass_1,2))
paste("Com -2.6464 + 1.9960 ln(d) + 0.7558 ln(h):", round(biomass_2,2))
vet <- c(9839,10149,10486,10746,11264,11684,12082,12599,13004,13350,13717,14052)
print(vet)
vet <- c(9839,10149,10486,10746,11264,11684,12082,12599,13004,13350,13717,14052)
print(vet)
m <- mean(vet)
m
max_test <- max(vet)
max_test
min_test <- min(vet)
min_test
length(vet)
order(vet, decreasing=F)
order(vet, decreasing=T)
sort(vet, decreasing=T)
R.version
print("olá mundo")
ls
setwd("C:/Users/Smart/Documents/IAA/IAUFPR/applied_statistics_II/")
setwd("C:/Users/Smart/Documents/IAA/IAUFPR/applied_statistics_II/")
library(readxl)
#import data of prostate.xlsx
prostate <- read_excel("prostate.xlsx")
prostate$ObsNumber <- 1:nrow(prostate)
save ("prostate", file = "./prostate.RData")
load("./prostate.RData")
summary(prostate)
#preliminary model
library (Rcmdr)
library(RcmdrMisc)
result <- lm(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa
, data = prostate)
summary(result)
prostate <- within(prostate, {
residuos <- residuals(result)
})
save ("prostate", file = "./prostate.RData")
library ("outliers")
grubbs.test(prostate$residuos, type = 10, opposite = FALSE, two.sided = TRUE)
#############################################################################
### Teste Qui-quadrado
load("./prostate.RData")
chisq.out.test(prostate$residuos,opposite=FALSE)
prostate <- prostate[prostate$residuos != -1.88603397103562, ]
result <- lm(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa
, data = prostate)
prostate <- within(prostate, {
residuos <- residuals(result)
})
chisq.out.test(prostate$residuos,opposite=FALSE)
load("./prostate.RData")
result <- lm(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa
, data = prostate)
library (car)
outlierTest(result)
prostate <- prostate[prostate$ObsNumber != 69, ]
result <- lm(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa
, data = prostate)
outlierTest(result)
summary(result)
load("./prostate.RData")
result <- lm(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa
, data = prostate)
prostate <- within(prostate, {
residuos <- residuals(result)
})
prostate$cooksd <- cooks.distance(result)
prostate$outlier <- with(prostate, ifelse(cooksd>4/97,"yes","no"))
# Separando os outliers
outliers <- prostate[prostate$outlier != "no", ]
outliers
cooksd <- cooks.distance(result)
sample_size <- nrow(prostate)
X11(width = 10, height = 12)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4/177, col="red")  # add cutoff line
text(x=2:length(cooksd)+2, y=cooksd, labels=ifelse(cooksd>4/sample_size,
names(cooksd),""), col="red")  # add labels
summary(result)
load("./prostate.RData")
result <- lm(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa
, data = prostate)
library (car)
outlierTest(result)
prostate <- prostate[prostate$ObsNumber != 69, ]
result <- lm(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa
, data = prostate)
outlierTest(result)
prostate <- within(prostate, {
residuos <- residuals(result)
})
library("RcmdrMisc")
normalityTest(~residuos, test="lillie.test", data=prostate)
summary(result)
normalityTest(~residuos, test="shapiro.test", data=prostate)
###############################################################################
##########Testar autocorrelação e corrigir com HAC se for o caso
load("./prostate.RData")
library(lmtest)
dwtest(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa,
alternative="greater", data=prostate)
bptest(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa,
studentize=FALSE, data=prostate)
chisup <- qchisq(0.95, df=8)
chisup
#############################################################################
#Fazer regressão stepwise e obter a melhor regressão, apresentar o resultado do
#modelo
#############################################################################
# Models by STEPWISE - use BIC for calculation
load("./prostate.RData")
result <- lm(lcavol ~  lweight + age + lbph + svi + lcp + gleason + pgg45 + lpsa
, data = prostate)
summary(result)
library(Rcmdr)
stepwise(result, direction= 'backward', criterion ='BIC')
result_stepwise <- lm(formula = lcavol ~ lcp + lpsa, data = prostate)
summary(result_stepwise)
AIC (result)
BIC (result)
library(AICcmodavg)
# AICc used for small samples
AICc (result)
library(performance)
model_performance(result)
model_performance(result_stepwise)
confint(result)
confint(result_stepwise)
